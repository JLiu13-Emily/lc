/*class Solution {
    public int maxSubArrayLen(int[] nums, int k) {          
        Map<Integer, Integer> indexes = new HashMap<>();
        int res = 0;
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum = sum + nums[i];
            if(sum == k)
                res = Math.max(res, i + 1);
            else if(indexes.containsKey(sum - k)){
                res = Math.max(res, i - indexes.get(sum - k));
            }
            if(!indexes.containsKey(sum)){
                indexes.put(sum, i);
            }
            
        }
        return res;
    }
}*/


class Solution {
    public int maxSubArrayLen(int[] nums, int k) {   
        Map<Integer, Integer> indexes = new HashMap<>();
        int res = 0;
        int sum = 0;
        indexes.put(0, -1);
        for(int i = 0; i < nums.length; i++){
            sum = sum + nums[i];
            if(indexes.containsKey(sum - k)){
                res = Math.max(res, i - indexes.get(sum - k));
            }
            if(!indexes.containsKey(sum)){
                indexes.put(sum, i);
            }
        }
        return res;
    }
}
