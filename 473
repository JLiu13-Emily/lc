class Solution {
    public boolean makesquare(int[] nums) {
        if(nums.length == 0) return false;
        Arrays.sort(nums);
        int sum = Arrays.stream(nums).sum();
        if(sum % 4 != 0) return false;
        return helper(nums, 0, 0, sum / 4, 1, new boolean[nums.length]);
    }
    private boolean helper(int[] nums, int idx, int tempsum, int target, int sideId, boolean[] visited){
        if(sideId == 4) return true; //return true when three sides were found
        if(tempsum > target) return false; 
        if(tempsum == target) 
            //position start from 0 again, visited could make sure not duplicate;
            return helper(nums, 0, 0, target, sideId + 1, visited);
        for(int i = idx; i < nums.length; i++){
            if(visited[i]) continue;
            //if i - 1 was tried and fail, then the same value on i would not success, so skip
            if(i > 0 && nums[i] == nums[i - 1] && !visited[i - 1]) continue;
            visited[i] = true;
            if(helper(nums, idx + 1, tempsum + nums[i], target, sideId, visited))
                return true;
            visited[i] = false;
        }
        return false;
        
    }
}
