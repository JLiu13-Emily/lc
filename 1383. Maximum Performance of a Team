class Solution {
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        int[][] pairs = new int[n][2];
        for(int i = 0; i < n; i++){
            pairs[i] = new int[]{speed[i], efficiency[i]};
        }
        Arrays.sort(pairs, (a, b) -> b[1] - a[1]);
        PriorityQueue<Integer> pq = new PriorityQueue<>(k, (a, b) -> a - b);
        long res = 0, sum = 0;
        for(int[] p : pairs){
            pq.add(p[0]);
            sum += p[0];
            if(pq.size() > k){
                sum -= pq.poll();
            }
            res = Math.max(res, (sum * p[1]));
        }
        return (int)(res % (long)(1e9 + 7));
    }
}
