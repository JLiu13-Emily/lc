/*class Solution {
    Set<Integer> visited = new HashSet<>();
    public boolean canReach(int[] arr, int start) {
        if(arr[start] == 0) return true;
        visited.add(start);
        boolean pre = false, post = false;
        if(start + arr[start] < arr.length && !visited.contains(start + arr[start])){
            post = canReach(arr, start + arr[start]);
        }
        if(start - arr[start] >= 0 && !visited.contains(start - arr[start])){
            pre = canReach(arr, start - arr[start]);
        }
        return (pre || post);
    }
    
}*/

class Solution {
    public boolean canReach(int[] arr, int start) {
        if(start < 0 || start >= arr.length ||arr[start] < 0) return false;
        if(arr[start] == 0) return true;
        arr[start] = -arr[start];
        return canReach(arr, start + arr[start]) || canReach(arr, start - arr[start]);
    }
}
