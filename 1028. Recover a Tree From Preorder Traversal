class Solution {
    public TreeNode recoverFromPreorder(String S) {
        Map<Integer, TreeNode> map = new HashMap<>();
        int i = 0;
        while(i < S.length()){
            int curLevel = 0, curNum = 0;
            while(i < S.length() && S.charAt(i) == '-'){
                curLevel++;
                i++;
            }
            while(i < S.length() && S.charAt(i) <= '9' && S.charAt(i) >= '0'){
                curNum = curNum * 10 + (S.charAt(i) - '0');
                i++;
            }
            TreeNode curNode = new TreeNode(curNum);
            map.put(curLevel, curNode);
            if(curLevel > 0){
                TreeNode parent = map.get(curLevel - 1);
                if(parent.left == null){
                    parent.left = curNode;
                }
                else{
                    parent.right = curNode;
                }
            }
        }
        return map.get(0);
    }
}
