class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        List<Integer> res = new ArrayList<>();
        TreeSet<Integer> free = new TreeSet<>();
        PriorityQueue<int[]> busy = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        int[] times = new int[k];
        for(int i = 0; i < k; i++) free.add(i);
        int max = 0;
        for(int i = 0; i < arrival.length; i++){
            while(!busy.isEmpty() && busy.peek()[0] <= arrival[i]){
                free.add(busy.peek()[1]);
                busy.poll();
            }
            if(free.isEmpty()) continue;
            Integer next = free.ceiling(i % k);
            if(next == null) next = free.first();
            int id = next;
            times[id]++;
            max = Math.max(max, times[id]);
            free.remove(id);
            busy.add(new int[]{arrival[i] + load[i], id});
        }
        for(int i = 0 ; i < k; i++){
            if(times[i] == max){
                res.add(i);
            }
        }
        return res;
    }
}
