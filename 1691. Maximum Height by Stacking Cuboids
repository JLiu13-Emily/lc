class Solution {
    public int maxHeight(int[][] cuboids) {
        for(int[] cub : cuboids){
            Arrays.sort(cub);
        }
        Arrays.sort(cuboids, new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                if(a[0] != b[0]){
                    return b[0] - a[0];
                }
                if(a[1] != b[1]){
                    return b[1] - a[1];
                }
                return b[2] - a[2];
            }
        });
        int n = cuboids.length, res = 0, dp[] = new int[n];
        for(int i = 0; i < n; i++){
            dp[i] = cuboids[i][2];
            for(int j = 0; j < i; j++){
                if(cuboids[j][0] >= cuboids[i][0] && cuboids[j][1] >= cuboids[i][1] && cuboids[j][2] >= cuboids[i][2]){
                    dp[i] = Math.max(dp[i], dp[j] + cuboids[i][2]);
                }                
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}
