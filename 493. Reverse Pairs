class Solution {
    int[] numscopy;
    public int reversePairs(int[] nums) {
        int n = nums.length;
        numscopy = new int[n];
        return mergeSort(nums, 0, n - 1);
    }
    private int mergeSort(int[] nums, int start, int end){
        if(start >= end) return 0;
        int mid = start + (end - start) /2;
        int count = mergeSort(nums, start, mid) + mergeSort(nums, mid + 1, end);
        for(int i = start, j = mid + 1; i <= mid; i++){
            while(j <= end && nums[i] / 2.0 > nums[j]){
                j++;
            }
            count += j - (mid + 1);
        }
        merge(nums, start, mid, end);
        return count;
    }
    private void merge(int[] nums, int start, int mid, int end){
        for(int i = start; i <= end; i++) numscopy[i] = nums[i];
        int left = start,  right = mid + 1;
        int idx = start;
        while(left <= mid || right <= end){
            if(left > mid || (right <= end && numscopy[left] >= numscopy[right])){
                nums[idx] = numscopy[right];
                idx++;
                right++;
            }
            else{
                nums[idx] = numscopy[left];
                idx++;
                left++;
            }
        }
    }
}
