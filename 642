class AutocompleteSystem {
    class TrieNode implements Comparable<TrieNode>{
        TrieNode[] children;
        String s;
        int times;
        List<TrieNode> top3;
        public TrieNode(){
            children = new TrieNode[128];
            s = "";
            times = 0;
            top3 = new ArrayList<>();
        }
        public int compareTo(TrieNode trie){
            if(this.times == trie.times)  return this.s.compareTo(trie.s);
            return trie.times - this.times;
        }
        public void update(TrieNode t){
            if(!this.top3.contains(t)){
                this.top3.add(t);
            }
            Collections.sort(this.top3);
            if(this.top3.size() > 3){
                this.top3.remove(this.top3.size() - 1);
            }
        }
    }
    TrieNode root, cur;
    StringBuilder prefix;
    public AutocompleteSystem(String[] sentences, int[] times) {
        root = new TrieNode();
        cur = root;
        prefix = new StringBuilder();
        for(int i = 0; i< sentences.length; i++){
            add(sentences[i], times[i]);
        }
    }
    public void add(String sentence, int t){
        TrieNode temp = root;
        List<TrieNode> l = new ArrayList<>();
        for(char c: sentence.toCharArray()){
            if(temp.children[c] == null) temp.children[c] = new TrieNode();
            temp = temp.children[c];
            l.add(temp);
        }
        temp.s = sentence;
        temp.times += t;
        for(TrieNode node: l){
            node.update(temp);
        }
    }
    public List<String> input(char c) {
        List<String> res = new ArrayList<>();
        if(c == '#'){
            add(prefix.toString(), 1);
            prefix = new StringBuilder();;
            cur = root;
            return res;
        }
        prefix.append(c);
        if(cur != null){
            cur = cur.children[c];
        }
        if(cur == null){
            return res;
        }
        for(TrieNode node: cur.top3){
            res.add(node.s);
        }
        return res;
    }
}

