class Solution {
    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> res = new ArrayList<>();
        if(m <= 0 || n <= 0) return res;
        int count = 0;
        int[][] matrix = new int[m][n];
        Set<String> visited = new HashSet<>();
        WeightedUnionFind wuf = new WeightedUnionFind(m * n);
        
        for(int i = 0; i < positions.length; i++){
            String symbol = positions[i][0] + "@" + positions[i][1];
            if(visited.contains(symbol)){
                res.add(wuf.getCount());
                continue;
            }
            visited.add(symbol);
            int[] pos = positions[i];
            int x = pos[0];
            int y = pos[1];
            matrix[x][y] = 1;
            wuf.count++;
            
            if(x > 0 && matrix[x - 1][y] == 1){
                if(!wuf.connected((x - 1) * n + y, x * n + y)){
                    wuf.count--;
                }
                wuf.union((x - 1) * n + y, x * n + y);
            }
            if(x < m - 1 && matrix[x + 1][y] == 1){
                if(!wuf.connected((x + 1) * n + y, x * n + y)){
                    wuf.count--;
                }
                wuf.union((x + 1) * n + y, x * n + y);
            }
            if(y > 0 && matrix[x][y - 1] == 1){
                 if(!wuf.connected(x * n + y - 1, x * n + y)){
                    wuf.count--;
                }
                wuf.union(x * n + y - 1, x * n + y);                
            }
            if(y < n - 1 && matrix[x][y + 1] == 1){
                 if(!wuf.connected(x * n + y + 1, x * n + y)){
                    wuf.count--;
                }
                wuf.union(x * n + y + 1, x * n + y);                
            }
            res.add(wuf.getCount());
        }
        return res;
    }
    
}
class WeightedUnionFind{
    private int[] id;
    private int[] size;
    public int count;
    
    public WeightedUnionFind(int n){
        this.count = 0;
        this.id = new int[n];
        this.size = new int[n];
        for(int i = 0; i < n; i++){
            id[i] = i;
            size[i] = i;
        }
    }
    public void union(int p, int q){
        int pRoot = find(p);
        int qRoot = find(q);
        
        if(pRoot == qRoot){
            return;
        }
        if(size[pRoot] > size[qRoot]){
            size[pRoot] += size[qRoot];
            id[pRoot] = id[qRoot];
        }
        else{
            size[qRoot] += size[pRoot];
            id[pRoot] = id[qRoot];
        }        
    }
    private int find(int p){
        while(p != id[p]){
            id[p] = id[id[p]];
            p = id[p];
        }
        return p;
    }
    public boolean connected(int p, int q){
        return find(p) == find(q);
    }
    public int getCount(){
        return count;
    }
    
}
