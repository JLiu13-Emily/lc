/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int idx;
    Map<Integer, Integer> idxMap;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        idxMap = new HashMap<>();
        idx = postorder.length - 1;
        for(int i = 0; i < inorder.length; i++){
            idxMap.put(inorder[i] , i);
        }
        return helper(postorder, 0, postorder.length - 1);
    }
    private TreeNode helper(int[] postorder, int left, int right){
        if(left > right) return null;
        int rootValue = postorder[idx];
        idx--;
        TreeNode root = new TreeNode(rootValue);
        root.right = helper(postorder, idxMap.get(rootValue) + 1, right);
        root.left = helper(postorder, left, idxMap.get(rootValue) - 1);
       
        return root;
    }
}
