/*class Solution {
    public int balancedString(String s) {
        int n = s.length();
        int avg = n / 4;
        Map<Character, Integer> map = new HashMap<>();
        for(char c: s.toCharArray()){
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int res = n;
        int left = 0, right = 0;
        while(right < n){
            char rc = s.charAt(right);
            map.put(rc, map.get(rc) - 1);
            right++;
            while(left < n && map.getOrDefault('Q', 0) <= avg && map.getOrDefault('R', 0) <= avg && map.getOrDefault('W', 0) <= avg && map.getOrDefault('E', 0) <= avg){
                res = Math.min(res, right - left);
                char lc =s.charAt(left);
                map.put(lc, map.get(lc) + 1);
                left++;
            }
        }
        return res;
    }
}*/
class Solution {
    public int balancedString(String s) {
        int n = s.length();
        int avg = n / 4;
        int[] chars = new int[128];
        for(char c: s.toCharArray()){
            chars[c]++;
        }
        int res = n;
        int left = 0, right = 0;
        while(right < n){
            chars[s.charAt(right)]--;
            right++;
            while(left < n && chars['Q'] <= avg && chars['W'] <= avg && chars['E'] <= avg && chars['R'] <= avg){
                res = Math.min(res, right - left);
                chars[s.charAt(left)]++;
                left++;
            }
        }
        return res;
    }
}
