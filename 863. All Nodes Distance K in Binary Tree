class Solution {
    Map<TreeNode, List<TreeNode>> graph = new HashMap<>();
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        if(K < 0) return res;
        buildGraph(root, null);
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(target);
        Set<TreeNode> visited = new HashSet<>();
        visited.add(target);
        while(!queue.isEmpty()){
            int size = queue.size();
            
            if(K == 0){
                for(int i = 0; i < size; i++){
                    TreeNode curNode = queue.poll();
                    res.add(curNode.val);
                }
                return res;
            }
            for(int i = 0; i < size; i++){
                TreeNode curNode = queue.poll();
                for(TreeNode neighbor: graph.get(curNode)){
                    if(visited.contains(neighbor)){
                        continue;
                    }
                    queue.offer(neighbor);
                    visited.add(neighbor);
                }                
            }
            K--;            
        }
        return res;
    }
    private void buildGraph(TreeNode root, TreeNode parent){
        if(root == null) return;
        if(!graph.containsKey(root)){
            graph.put(root, new ArrayList<TreeNode>());
            if(graph.get(parent) != null){
                graph.get(root).add(parent);
                graph.get(parent).add(root);
            }
            buildGraph(root.left, root);
            buildGraph(root.right, root);
        }
    }
}
