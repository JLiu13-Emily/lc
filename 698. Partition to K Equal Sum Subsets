class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = 0;
        for(int num: nums) sum += num;
        if(sum % k != 0) return false;
        int[] visited = new int[nums.length];
        return dfs(nums, visited, 0, k, 0, 0, sum/k);
    }
    private boolean dfs(int[] nums, int[] visited, int startidx, int k, int curSum, int curSetSize, int target){
        if(k == 1) return true;
        if(curSum == target && curSetSize > 0) return dfs(nums, visited, 0, k - 1, 0, 0, target);
        for(int i = startidx; i < nums.length; i++){
            if(visited[i] == 0){
                visited[i] = 1;
                if(dfs(nums, visited, i + 1, k, curSum + nums[i], curSetSize++, target)) return true;
                visited[i] = 0;
            }
        }
        return false;        
    }
}
