class Solution {
    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
        int[][][] dp = new int[m][n][target + 1];
        for(int i = 0; i < m; i++){
            for(int k = 0; k < n; k++){                
                for(int j = 0; j <= target ; j++){
                    dp[i][k][j] = -1;
                }
            }
        }
        for(int i = 0; i < n; i++){
            if(houses[0] == 0) dp[0][i][1] = cost[0][i];
            else if(houses[0] == i + 1){
                dp[0][i][1] = 0;
            }
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j <= target && j <= i + 1; j++){
                for(int k = 0; k < n; k++){
                    if(houses[i] != 0 && houses[i] != k + 1) continue;
                    int paintCost = houses[i] == k + 1? 0:cost[i][k];
                    
                    for(int g = 0; g < n; g++){
                        if(k == g && dp[i - 1][k][j] != -1){
                            dp[i][k][j] = dp[i][k][j] == -1 ? paintCost + dp[i - 1][k][j] : Math.min(dp[i][k][j], paintCost + dp[i - 1][k][j]);
                        }
                        else if(k != g && dp[i - 1][g][j - 1] != -1){
                            dp[i][k][j] = dp[i][k][j] == -1 ? paintCost + dp[i - 1][g][j - 1] : Math.min(dp[i][k][j], paintCost + dp[i - 1][g][j - 1]);
                        }
                    }
                }
            }
        }
        int res = -1;
        for(int i = 0; i < n; i++){
            if(dp[m - 1][i][target] != -1){
                res = res == -1 ? dp[m - 1][i][target] : Math.min(res, dp[m - 1][i][target]);
            }
        }
        return res;
    }
}
