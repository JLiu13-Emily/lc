/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k == 1) return head;
        ListNode cur = head;
        int count = 0;
        while(cur != null){
            cur = cur.next;
            count++;
        }
        int turn = count / k;
        ListNode before = null, after = null, res = null;
        cur = head;
        for(int i = 0; i < turn; i++){
            ListNode curHead = null, curTail = null, prev = null;
            for(int j = 0; j < k; j++){
                if(j == 0){
                    curTail = cur;
                }
                else if(j == k - 1){
                    curHead = cur;
                }
                ListNode temp = cur.next;
                cur.next = prev;
                prev = cur;
                cur = temp;
            }
            if(before == null && after == null){
                res = curHead;
                before = curHead;
                after = curTail;
            }
            else{
                after.next = curHead;
                before = curHead;
                after = curTail;
            }
        }
        after.next = cur;
        return res;
    }
}
