class Solution {
    public int minimumHammingDistance(int[] source, int[] target, int[][] allowedSwaps) {
        int n = source.length;
        int[] union = new int[n];
        for(int i = 0; i < n; i++) union[i] = i;
        for(int[] swap: allowedSwaps){
            int idx1 = swap[0], idx2 = swap[1];
            int root1 = find(union, idx1), root2 = find(union, idx2);
            if(root1 != root2) union[root1] = root2;
        }
        Map<Integer, Map<Integer, Integer>> rootMap = new HashMap<>();
        for(int i = 0; i < n; i++){
            int num = source[i];
            int root = find(union, i);            
            rootMap.putIfAbsent(root, new HashMap<>());
            Map<Integer, Integer> store = rootMap.get(root);
            store.put(num, store.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        for(int i = 0; i < n; i++){
            int num = target[i];
            int root = find(union, i);
            Map<Integer, Integer> store = rootMap.get(root);
            if(store.getOrDefault(num, 0) == 0) count++;
            else store.put(num, store.get(num) - 1);
        }
        return count;
        
    }
    private int find(int[] union, int idx){
        if(union[idx] == idx) return idx;        
        return union[idx] = find(union, union[idx]);
    }
}
