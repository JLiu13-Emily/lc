class MyHashMap {
    class ListNode{
        int value, key;
        ListNode next;
        public ListNode(int val, int key){
            value = val;
            this.key = key;
        }
    }
    ListNode[] lns = new ListNode[10000]; 
    /** Initialize your data structure here. */
    public MyHashMap() {
        
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int idx = findIdx(key);
        if(lns[idx] == null) lns[idx] = new ListNode(-1, -1);
        ListNode prev= find(lns[idx], key);
        if(prev.next == null) prev.next = new ListNode(value, key);
        else prev.next.value = value;
        
    }
    
    private int findIdx(int key){
        return Integer.hashCode(key) % lns.length;
    }
    
    private ListNode find(ListNode bucket, int key){
        ListNode node = bucket, prev = null;
        while(node != null && node.key != key){
            prev = node;
            node = node.next;
        }
        return prev;
    }
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int idx = findIdx(key);
        if(lns[idx] == null){
            return -1;
        }
        ListNode prev = find(lns[idx], key);
        return prev.next == null? -1 : prev.next.value;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int idx = findIdx(key);
        if(lns[idx] == null) return;
        ListNode prev = find(lns[idx], key);
        if(prev.next == null) return;
        prev.next = prev.next.next;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
