class Solution {
    int[] dp = new int[1001];
    public int maxJumps(int[] arr, int d) {
       int res = 0;
       for(int i = 0; i < arr.length; i++){
           dfs(arr, d, i);
           res = Math.max(res, dp[i]);
       } 
        return res;
    }
    private int dfs(int[] arr, int d, int idx){
        if(dp[idx] != 0) return dp[idx];
        int res = 1;
        for(int k = 1; k <= d; k++){
            if(idx + k >= arr.length) break;
            if(arr[idx] <= arr[idx + k]) break;
            res = Math.max(res, dfs(arr, d, k + idx) + 1);
        }
        for(int k = 1; k <= d; k++){
            if(idx - k < 0) break;
            if(arr[idx] <= arr[idx - k]) break;
            res = Math.max(res, dfs(arr, d, idx - k) + 1);
        }
        dp[idx] = res;
        return res;
    }
}
