/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int idx;
    Map<Integer, Integer> idxMap;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        idx = 0;
        int n = inorder.length;
        idxMap = new HashMap<>();
        for(int i = 0; i < n; i++){
            idxMap.put(inorder[i], i);
        }
        return helper(preorder, 0, preorder.length - 1);
    }
    private TreeNode helper(int[] preorder, int left, int right){
        if(left > right) return null;  
        int rootValue = preorder[idx]; 
        idx++;
        TreeNode root = new TreeNode(rootValue);        
        root.left = helper(preorder, left, idxMap.get(rootValue) - 1 );
        root.right = helper(preorder,  idxMap.get(rootValue) + 1, right );
        return root;
    }
}
