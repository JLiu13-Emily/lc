class Solution {
    public int profitableSchemes(int n, int minProfit, int[] group, int[] profit) {
        int mod = (int)1e9 +7;
        int[][][] dp = new int[group.length + 1][n + 1][minProfit + 1];
        dp[0][0][0] = 1;
        for(int i = 1; i <= group.length; i++){
            int g = group[i - 1];
            int p = profit[i - 1];
            for(int j = 0; j <= n; j++){
                for(int k = 0; k <= minProfit; k++){
                    dp[i][j][k] = dp[i - 1][j][k];
                    if(g <= j){
                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - g][Math.max(0, k - p)]) % mod;
                    }
                }
            }
        }
        int sum = 0;
        for(int i = 0; i <= n; i++){
            sum = (sum + dp[group.length][i][minProfit]) % mod;
        }
        return sum;
    }
}

