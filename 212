class Solution {
    Set<String> res = new HashSet<>();
    public List<String> findWords(char[][] board, String[] words) {
        Trie trie = new Trie();
        for(String s: words){
            trie.insert(s);
        }
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                helper(board, i, j , "" , trie, visited);
            }
        }
        return new ArrayList<String>(res);
    }
    private void helper(char[][] board, int i, int j, String s,  Trie trie, boolean[][] visited){
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length){
            return;
        }
        if (visited[i][j]) return;
        s += board[i][j];
        if(!trie.startWith(s)){
            return;
        }
        if(trie.search(s)){
            res.add(s);
        }
        
        visited[i][j] = true;
        helper(board, i - 1, j, s, trie, visited);
        helper(board, i + 1, j, s, trie, visited);
        helper(board, i, j - 1, s, trie, visited);
        helper(board, i, j + 1, s, trie, visited);
        visited[i][j] = false;
    }
}
class Trie{
    private TrieNode root;
    public Trie(){
        root = new TrieNode();
    }
    public void insert(String word){
        TrieNode node = root;
        for(char c: word.toCharArray()){
            if(node.children[c - 'a'] == null){
                node.children[c - 'a'] = new TrieNode();
            }
            node = node.children[c - 'a'];
        }
        node.str = word;
    }
    public boolean search(String word){
        TrieNode node = root;
        for(char c: word.toCharArray()){
            if(node.children[c - 'a'] == null){
                return false;
            }
            node = node.children[c - 'a'];
        }
        return node.str.equals(word);
    }
    public boolean startWith(String prefix){
        TrieNode node = root;
        for(char c: prefix.toCharArray()){
            if(node.children[c - 'a'] == null){
                return false;
            }
            node = node.children[c - 'a'];
        }
        return true;
    }
}
class TrieNode{
    TrieNode[] children = new TrieNode[26];
    String str = "";
    public TrieNode(){
        
    }
}
