class Solution {
    int max = 0;
    public int longestUnivaluePath(TreeNode root) {
        helper(root, null);
        return max;
    }
    private int helper(TreeNode root, TreeNode pre){
        if(root == null) return 0;
        int left = helper(root.left, root); 
        int right = helper(root.right, root);
        max = Math.max(max, left + right);
        if(pre != null && pre.val == root.val){
            return Math.max(left, right) + 1;
        }
        else{
            return 0;
        }
    }
}

class Solution {
    int res;
    public int longestUnivaluePath(TreeNode root) {
        res = 0;
        findUnivaluePath(root);
        return res;
    }
    private int findUnivaluePath(TreeNode root) {
        if(root == null) return 0;
        int left = findUnivaluePath(root.left);
        int right = findUnivaluePath(root.right);
        int curleft = 0, curright = 0;
        if(root.left != null && root.val == root.left.val) {
            curleft = left + 1;
        }
        if(root.right != null && root.val == root.right.val) {
            curright = right + 1;
        }
        res = Math.max(res, curleft + curright);
        return Math.max(curleft, curright);
    }
}
