class Solution {
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        int mod = (int) 1e9 + 7;
        int dp[][] = new int[m][n];
        dp[startRow][startColumn] = 1;
        int count = 0;
        for(int i = 1; i <= maxMove; i++){
            int[][] temp = new int[m][n];
            for(int j = 0; j < m; j++){
                for(int k = 0; k < n; k++){
                    if(j == 0 ) count = (count + dp[j][k]) % mod;
                    if(k == 0 ) count = (count + dp[j][k]) % mod;
                    if(j == m - 1) count = (count + dp[j][k]) % mod;
                    if(k == n - 1){
                        count = (count + dp[j][k]) % mod;
                    }
                    temp[j][k] = (((j > 0 ? dp[j - 1][k] : 0) + (k > 0 ? dp[j][k - 1] : 0)) % mod
                                     + ((j < m - 1? dp[j + 1][k] : 0) + (k < n - 1 ? dp[j][k + 1] : 0)) % mod) % mod;
                }
            }
            dp = temp;
        }
        return count;
    }
}
