class NumArray {
    class TreeNode{
        int start, end;
        TreeNode left, right;
        int sum;
        public TreeNode(int s, int e){
            start = s;
            end = e;
            this.left = null;
            this.right = null;
            sum = 0;
        }
    }
    TreeNode root;
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length - 1);
    }
    private TreeNode buildTree(int[] nums, int start, int end){
        if(start > end) return null;
        TreeNode tn = new TreeNode(start, end);
        if(start == end){
            tn.sum = nums[start];
        }
        else{
            int mid = start + (end - start) /2;
            tn.left = buildTree(nums, start, mid);
            tn.right = buildTree(nums, mid + 1, end);
            tn.sum = tn.left.sum + tn.right.sum;
        }
        return tn;
    }
    public void update(int index, int val) {
        update(root, index, val);
    }
    private void update(TreeNode root, int idx, int val){
        if(root.start == root.end) root.sum = val;
        else{
            int mid = root.start + (root.end - root.start) / 2;
            if(idx <= mid){
                update(root.left, idx, val);
            }
            else{
                update(root.right, idx, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }
    public int sumRange(int left, int right) {
        return sumRange(root, left, right);
    }
    private int sumRange(TreeNode root, int start, int end){
        if(root.start == start && root.end == end) return root.sum;
        int mid = root.start + (root.end - root.start) / 2;
        if(end <= mid) {
            return sumRange(root.left, start, end);
        }
        else if(start >= mid + 1){
            return sumRange(root.right, start, end);
        }
        else{
            return sumRange(root.left, start, mid) + sumRange(root.right, mid + 1, end);
        }
    }
}
