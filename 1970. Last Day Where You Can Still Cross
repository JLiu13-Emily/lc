class Solution {
    public int latestDayToCross(int row, int col, int[][] cells) {
        int left = 1;
        int right = cells.length;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(helper(cells, row, col, mid)){
                left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
        return right;
        
    }
    private boolean helper(int[][] cells, int r, int c, int day){
        int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        int[][] matrix = new int[r][c];
        Queue<int[]> queue = new LinkedList<>();
        for(int i = 0; i < day; i++){
            matrix[cells[i][0] - 1][cells[i][1] - 1] = 1;
        }
        for(int i = 0; i < c; i++){
            if(matrix[0][i] == 0){
                queue.offer(new int[]{0, i});
                matrix[0][i] = 1;
            }
        }
        while(!queue.isEmpty()){
            int[] cur = queue.poll();
            int x = cur[0], y = cur[1];
            if(x == r - 1) return true;
            for(int[] dir: dirs){
                int nx = x + dir[0];
                int ny = y + dir[1];
                if(nx < 0 || ny < 0 || nx >= r || ny >= c || matrix[nx][ny] == 1) continue;
                matrix[nx][ny] = 1;
                queue.offer(new int[]{nx, ny});
            }
        }
        return false;
    }
}
