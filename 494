/*class Solution {
    int count = 0;
    public int findTargetSumWays(int[] nums, int S) {
        helper(nums, S, 0, 0);
        return count;
    }
    private void helper(int[] nums, int target, int idx, int sum){
        if(idx == nums.length ){
            if(sum == target){
                count++;
            }
            return;
        } 
        helper(nums, target,idx + 1, sum + nums[idx]);
        helper(nums, target,idx + 1, sum - nums[idx]);        
    }
}*/

class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0 , 1);
        for(int i: nums){
            Map<Integer, Integer> map_new = new HashMap<>();
            for(int oldkey : map.keySet()){
                int k1 = oldkey + i;
                map_new.put(k1, map_new.getOrDefault(k1, 0) + map.get(oldkey));
                int k2 = oldkey - i;
                map_new.put(k2, map_new.getOrDefault(k2, 0) + map.get(oldkey));
            }
            map = map_new;
        }
        return map.getOrDefault(S, 0);
    }
}
