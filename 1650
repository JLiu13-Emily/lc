class Solution {
    public Node lowestCommonAncestor(Node p, Node q) {
        Node a = p, b = q;
        while(a != b){
            a = a == null? q:a.parent;
            b = b == null? p:b.parent;
        }
        return b;
        
    }
}

class Solution {
    public Node lowestCommonAncestor(Node p, Node q) {
        Set<Node> set = new HashSet<>();
        while(p != null){
            if(set.contains(p)) return p;
            set.add(p);
            p = p.parent;
            Node temp = p;
            p = q;
            q = temp;
        }
        while(q != null){
            if(set.contains(q)) return q;
            q = q.parent;
        }
        return null;
    }
}

class Solution {
    public Node lowestCommonAncestor(Node p, Node q) {
        Set<Node> set = new HashSet<>();
        while(p != null){
            set.add(p);
            p = p.parent;
        }
        while(q != null){
            if(set.contains(q)) return q;
            q = q.parent;
        }
        return null;
    }
}
