class Solution {
    int max = 0;
    public int longestConsecutive(TreeNode root) {
        dfs(root);
        return max;
    }
    private int[] dfs(TreeNode root) {
        if(root == null) return new int[2];
        int[] left = dfs(root.left);
        int[] right = dfs(root.right);
        int inc = 1, dec = 1;
        if(root.left != null) {
            if(root.left.val - root.val == 1) {
                inc = left[0] + 1;
            }
            else if(root.val - root.left.val == 1) {
                dec = left[1] + 1;
            }
        }
        if(root.right != null) {
            if(root.right.val - root.val == 1) {
                inc = Math.max(inc, right[0] + 1);
            }
            else if(root.val - root.right.val == 1) {
                dec = Math.max(dec, right[1] + 1);
            }
        }
        max = Math.max(max, inc + dec - 1);
        return new int[]{inc, dec};
    }
}
