class Solution {
    public int minJumps(int[] arr) {
        int n = arr.length;
        Map<Integer, List<Integer>> indexes = new HashMap<>();
        for(int i = 0; i < arr.length; i++){
            if(!indexes.containsKey(arr[i])){
                indexes.put(arr[i], new ArrayList<Integer>());
            }
            indexes.get(arr[i]).add(i);
        }
        boolean[] visited = new boolean[n];
        visited[0] = true;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        int count = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int curidx = queue.poll();
                if(curidx == n - 1) return count;
                List<Integer> next = indexes.get(arr[curidx]);
                next.add(curidx - 1);
                next.add(curidx + 1);
                for(int j: next){
                    if(j < n && j >=0 && !visited[j]){
                        visited[j] = true;
                        queue.offer(j);
                    }
                }
                next.clear();
            }
            count++;
        }
        return 0;
    }
}
