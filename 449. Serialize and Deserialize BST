public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "";
        StringBuilder sb = new StringBuilder();
        Stack<TreeNode> stack = new Stack<>();
        stack.add(root);
        while(!stack.isEmpty()){
            TreeNode temp = stack.pop();
            sb.append(temp.val + " ");
            if(temp.right != null) stack.add(temp.right);
            if(temp.left != null) stack.add(temp.left);
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == "") return null;
        String[] strs = data.split(" ");
        Queue<Integer> q = new LinkedList<>();
        for(String s: strs){
            q.offer(Integer.parseInt(s));
        }
        return getNode(q);
    }
    private TreeNode getNode(Queue<Integer> q){
        if(q.isEmpty()) return null;
        TreeNode root = new TreeNode(q.poll());
        Queue<Integer> smaller = new LinkedList<>();
        while(!q.isEmpty() && q.peek() < root.val){
            smaller.offer(q.poll());
        }
        root.left = getNode(smaller);
        root.right = getNode(q);
        return root;
    }
}
