class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int n = nums.length;
        int[] copy = new int[n];
        for(int i = 0; i < n; i++){
            copy[i] = nums[i];
        }
        int start = n, end = 0;
        Arrays.sort(copy);
        for(int i = 0; i < n; i++){
            if(copy[i] != nums[i]){
                start = Math.min(i, start);
                end = Math.max(i, end);
            }
        }
        return end - start >= 0? end - start + 1 : 0;
        
    }
}

class Solution {
    public int findUnsortedSubarray(int[] nums) {
        Stack<Integer> stack = new Stack<>();
        int n = nums.length;
        int start = n, end = 0;
        for(int i = 0; i < n; i++){
            while(!stack.isEmpty() && nums[stack.peek()] > nums[i]){
                start = Math.min(start, stack.pop());
            }
            if(!stack.isEmpty() && nums[stack.peek()] > nums[i]){
                 start = stack.pop();
                 break;
            }            
            stack.push(i);
        }
        stack.clear();
        for(int i = n - 1; i >= 0; i--){
            while(!stack.isEmpty() && nums[stack.peek()] < nums[i]){
                end = Math.max(end, stack.pop());
            }
            stack.push(i);
        }
        return start < end? end - start + 1 : 0;
    }
}
