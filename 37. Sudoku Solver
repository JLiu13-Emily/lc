class Solution {
    public void solveSudoku(char[][] board) {
        helper(board);
    }
    private boolean helper(char[][] board){
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] != '.') continue;
                for(char k = '1'; k <= '9'; k++){
                    if(isValid(board, i, j, k)){
                        board[i][j] = k;
                        if(helper(board)){
                            return true;
                        }
                        board[i][j] = '.';
                    }
                    
                }
                return false;
            }
        }
        return true;
    } 
    private boolean isValid(char[][] board, int row, int col, char k){
        int boxrow = (row / 3) * 3, boxcol = (col / 3) * 3;
        for(int i = 0; i < 9; i++){
            if(board[i][col] == k || board[row][i] == k || board[boxrow + i / 3][boxcol + i % 3] == k){
                return false;
            }
        }
        return true;
    }
}
