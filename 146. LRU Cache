class LRUCache {
    class Node{
        int key,value;
        Node prev, next;        
        public Node(int k, int v){
            key = k;
            value = v;
        }
    }
    Map<Integer, Node> map;
    Node head, tail;
    int cap;
    public LRUCache(int capacity) {
        cap = capacity;
        map = new HashMap<>();
    }
    private void setHead(Node n){
        n.next = head;
        n.prev = null;
        if(head != null) head.prev = n;
        head = n;
        if(tail == null) tail = head;
        
    }
    private void remove(Node n){
        if(n.prev != null)
            n.prev.next = n.next;
        else head = n.next;
        if(n.next != null)
            n.next.prev = n.prev;
        else
            tail = n.prev;
        
    }
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node n = map.get(key);
        remove(n);
        setHead(n);
        return n.value;
    }
    
    public void put(int key, int value) {
        
        if(!map.containsKey(key)){
            Node n = new Node(key, value);
            if(map.size() >= cap){
                map.remove(tail.key);
                remove(tail);
                setHead(n);
            }
            else{
                setHead(n);
            }
            map.put(key, n);
        }
        else{
            Node n = map.get(key);
            n.value = value;
            remove(n);
            setHead(n);
        }
    }
}
