class Solution {
    int res = Integer.MAX_VALUE;
    public int assignBikes(int[][] workers, int[][] bikes) {        
        dfs(workers, bikes, new boolean[bikes.length], 0, 0);
        return res;
    }
    private void dfs(int[][] workers, int[][] bikes, boolean[] visited, int idx, int curDis){
        if(idx >= workers.length) {
            res = Math.min(res, curDis);
            return;
        }
        if(curDis > res) return;
        for(int i = 0; i < bikes.length; i++){
            if(visited[i]) continue;
            visited[i] = true;
            dfs(workers, bikes, visited, idx + 1, curDis + findDis(workers[idx], bikes[i]));
            visited[i] = false;
        }
    }
    private int findDis(int[] worker, int[] bike) {
        return Math.abs(worker[0] - bike[0]) + Math.abs(worker[1] - bike[1]);
    }
}
