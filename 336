class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        TrieNode root = new TrieNode();
        for(int Id = 0; Id < words.length; Id++){
            String word = words[Id];
            String reverseW = new StringBuilder(word).reverse().toString();
            TrieNode trieLevel = root;
            for(int i = 0; i < word.length(); i++){
                if(hasPalRemain(reverseW, i)){
                    trieLevel.palRemain.add(Id);
                }
                char c = reverseW.charAt(i);
                if(trieLevel.children[c - 'a'] == null) 
                    trieLevel.children[c - 'a'] = new TrieNode();
                 trieLevel = trieLevel.children[c - 'a'];
            }
            trieLevel.isWord = Id;
        }
        
        List<List<Integer>> res = new ArrayList<>();
        for(int Id = 0; Id < words.length; Id++){
            String word = words[Id];
            TrieNode tLevel = root;
            for(int i = 0; i < word.length(); i++){
                if(tLevel.isWord != -1 && hasPalRemain(word, i)){
                    res.add(Arrays.asList(Id,tLevel.isWord));
                }
                char c = word.charAt(i);
                tLevel = tLevel.children[c - 'a'];
                if(tLevel == null) break;
            }
            if(tLevel == null) continue;
            if(tLevel.isWord != -1 && tLevel.isWord != Id){
                res.add(Arrays.asList(Id, tLevel.isWord));
            }
            for(int r : tLevel.palRemain){
                res.add(Arrays.asList(Id, r));
            }
        }
        return res;
    }
    private boolean hasPalRemain(String s, int i){
        int l = i; 
        int r = s.length() - 1;
        while(l < r){
            if(s.charAt(l) != s.charAt(i)) return false;
            l++;
            r--;
        }
        return true;
    }
}
class TrieNode{
    TrieNode[] children = new TrieNode[26];
    List<Integer> palRemain = new ArrayList<>();
    int isWord = -1;
}
