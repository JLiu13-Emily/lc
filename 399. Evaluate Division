class Solution {
    Set<String> visited = new HashSet<>();
    Map<String, String> roots = new HashMap<>();
    Map<String, Double> vals = new HashMap<>();
    Map<String, Map<String, Double>> edges = new HashMap<>();
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        for(int i = 0; i < equations.size(); i++){
            String str1 = equations.get(i).get(0);
            String str2 = equations.get(i).get(1);
            if(!edges.containsKey(str1)){
                edges.put(str1, new HashMap<String, Double>());
            }
            if(!edges.containsKey(str2)){
                edges.put(str2, new HashMap<String, Double>());
            }
            edges.get(str1).put(str2, values[i]);
            edges.get(str2).put(str1, 1 / values[i]);
        }
        for(String s : edges.keySet()){
            if(!visited.contains(s)){
                dfs(s, s , 1);
            }
        }
        int n = queries.size();
        double[] res = new double[n];
        for(int i = 0; i < n; i++){
            String x = queries.get(i).get(0);
            String y = queries.get(i).get(1);
            String px = roots.getOrDefault(x, x);
            String py = roots.getOrDefault(y, y);
            if(px != py){
                res[i] = -1.0;
            }
            else{
                res[i] = vals.get(x) / vals.get(y);
            }
        }
        
        return res;
    }
    private void dfs(String x, String p, double v){
        vals.put(x, v);
        roots.put(x, p);
        visited.add(x);
        for(String y: edges.get(x).keySet()){
            if(!visited.contains(y)){
                dfs(y, p, v * edges.get(y).get(x));
            }
        }
    }
}
