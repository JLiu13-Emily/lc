class Solution {
    long mod = (int)1e9 + 7;
    public int maxProfit(int[] inventory, int orders) { 
        int n = inventory.length;
        Arrays.sort(inventory);
        long left = 1, right = inventory[n - 1];
        long res = 0;
        while(left < right){
            long mid = left + (right - left) / 2;
            if(count(mid, inventory) <= orders){
                right = mid;
            }else{
                left = mid + 1;
            }
        }
        long target = left;
        for(int i = n - 1; i >= 0; i--){
            if(inventory[i] < target) break;
            res += (inventory[i] + target) * (inventory[i] - target + 1) / 2;
            res %= mod;
        }
        long r = orders - count(target, inventory);
        res += (target - 1) * r;
        return (int)(res % mod);
    }
    private long count(long k, int[] nums){
        long res = 0;
        for(int i = nums.length - 1; i >= 0; i--){
            if(nums[i] < k) break;
            res += nums[i] - k + 1;
        }
        return res;
    }
}
